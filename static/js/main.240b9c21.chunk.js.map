{"version":3,"sources":["images/times-solid2.svg","images/circle-regular.svg","components/Lesson11/Task11_8.js","App.js","index.js"],"names":["module","exports","box","Cell","props","cell","onChange","indexR","indexC","onCount","content","src","circle","alt","cross","className","onClick","disabled","useCells","initialState","count","useState","value","setValue","map","row","i","onNewGame","newCells","useCounting","prev","onZero","Task11_8","cells","isWinner","setIsWinner","isGame","setIsGame","useEffect","every","items","num","nums","winner","style","color","display","key","j","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.240b9c21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/times-solid2.6e9c1d2a.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle-regular.903f1c71.svg\";","import React, { useState } from 'react';\n\nimport './task11_8.css';\nimport cross from '../../images/times-solid2.svg';\nimport circle from '../../images/circle-regular.svg';\nimport { useEffect } from 'react';\n\nconst box = [\n  [0,0,0],\n  [0,0,0],\n  [0,0,0]\n];\n\nconst Task11_8 = () => {\n  const count= useCounting(0);\n  const cells = useCells(box, count.value);\n  const [isWinner, setIsWinner] = useState(true);\n  const [isGame, setIsGame] = useState(true);\n\n  useEffect(() => {\n    if (cells.value.every((items, i) => items[i] === 1)\n      || cells.value.every((items, i) => items[2 - i] === 1)) {\n      setIsGame(false);\n    }\n\n    if (cells.value.every((items, i) => items[i] === 2)\n      || cells.value.every((items, i) => items[2 - i] === 2)) {\n      setIsGame(false);\n      setIsWinner(false);\n    }\n\n    for(let i = 0; i < 3; i++) {\n      if (cells.value[i].every(num => num === 1)\n      || cells.value.every(nums => nums[i] === 1)) {\n        setIsGame(false);\n        break;\n      }\n      if (cells.value[i].every(num => num === 2)\n      || cells.value.every(nums => nums[i] === 2)) {\n        setIsGame(false);\n        setIsWinner(false);\n        break;\n      }\n    }\n\n  }, [cells.value]);\n\n  const handlerNewGame = () => {\n    cells.onNewGame(box);\n    setIsGame(true);\n    setIsWinner(true);\n    count.onZero();\n\n\n  };\n\n  const winner = isGame ? null : isWinner\n    ? <h1 style={{color: 'red'}}>Circle is winner</h1>\n    : <h1 style={{color: 'red'}}>Cross is winner</h1>\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"winner\" style={{display: isGame ? 'none' : 'flex'}}>\n        {winner}\n      </div>\n\n      <div className=\"box\">\n        {cells.value.map((row, i) => (\n          <div key={i} className=\"row\">\n            {row.map((cell, j) => (\n              <Cell\n                key={j}\n                indexR={i}\n                indexC={j}\n                cell={cell}\n                onChange={cells.onChange}\n                onCount={count.onChange}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <button\n      className=\"btn btn-position\"\n      onClick={handlerNewGame}\n      >\n        new game\n      </button>\n    </div>\n\n  )\n};\n\nconst Cell = (props) => {\n  const {\n    cell,\n    onChange,\n    indexR,\n    indexC,\n    onCount,\n  } = props;\n\n  const handlerChangeNum = () => {\n    onChange(indexR, indexC);\n    onCount();\n  };\n\n  const content = !cell\n    ? null\n    : cell === 1 ? <img src={circle} alt=\"o\"/> : <img src={cross} alt=\"+\"/>\n\n  return (\n    <div\n      className=\"item\"\n    >\n      <button\n        className=\"button-sell\"\n        onClick={handlerChangeNum}\n        disabled={cell}\n      >\n        {content}\n      </button>\n    </div>\n  );\n};\n\nconst useCells = (initialState, count) => {\n  const [value, setValue] = useState(initialState);\n\n  const handlerChange = (indexR, indexC) => {\n    setValue(value.map((row, i) => {\n      if (i === indexR) {\n        return row.map((cell, i) => {\n          if (i === indexC) {\n            return count%2 ? 2 : 1;\n          }\n          return cell;\n        });\n      }\n\n      return row;\n    }));\n  }\n\n  const handlerNewGame = (newCells) => {\n    setValue(newCells);\n  }\n\n  return {\n    value,\n    onChange: handlerChange,\n    onNewGame: handlerNewGame\n  };\n};\n\nconst useCounting = (initialState) => {\n  const [value, setValue] = useState(initialState);\n\n  const handlerIncrease = () => {\n    setValue(prev => prev + 1);\n  }\n\n  const handlerSetToZero = () => {\n    setValue(0);\n  };\n\n  return {\n    value,\n    onChange: handlerIncrease,\n    onZero: handlerSetToZero\n  }\n};\n\nexport default Task11_8;\n","import React from 'react';\nimport './App.css';\n\nimport Tusk from './components/Lesson11/Task11_8';\n\nfunction App() {\n\n  return (\n    <div >\n      <Tusk />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}